package io.github.fumiya_kume.gtfs_k.lib

import com.github.doyaaaaaken.kotlincsv.client.CsvReader
import com.github.doyaaaaaken.kotlincsv.dsl.csvReader
import java.io.ByteArrayInputStream
import java.net.URL
import java.util.zip.ZipInputStream

@Suppress("unused", "RedundantVisibilityModifier")
public fun gtfsReader(url: String): GtfsData {
    return downloadGtfsFile(url)
        .unzipFile()
        .parseFileList()
}

private fun downloadGtfsFile(url: String): ZipInputStream = ZipInputStream(ByteArrayInputStream(URL(url).readBytes()))

private fun ZipInputStream.unzipFile(): Map<String, String> {
    val files = mutableMapOf<String, String>()
    var entry = nextEntry
    while (entry != null) {
        val content = readAllBytes().decodeToString()
        files[entry.name] = content
        entry = nextEntry
    }
    close()
    return files
}

private fun Map<String, String>.parseFileList(): GtfsData {
    return GtfsData(
        agency = parseAgency(),
        agencyJapan = parseAgencyJapan(),
        routes = parseRoutes(),
        routesJapan = parseRoutesJapan(),
    )
}

private fun Map<String, String>.parseAgency(): List<Agency> {
    val data = get("agency.txt") ?: return emptyList()
    return csvReader().readAllWithHeader(data).map { row ->
        Agency(
            agencyId = row["agency_id"]?.let { AgencyId(it) },
            agencyName = row["agency_name"],
            agencyUrl = row["agency_url"],
            agencyTimezone = row["agency_timezone"],
            agencyLang = row["agency_lang"],
            agencyPhone = row["agency_phone"],
            agencyFareUrl = row["agency_fare_url"],
            agencyEmail = row["agency_email"]
        )
    }
}

private fun Map<String,String>.parseAgencyJapan(): List<AgencyJapan> {
    val data = get("agency_jp.txt") ?: return emptyList()
    return csvReader().readAllWithHeader(data).map { row ->
        AgencyJapan(
            agencyId = row["agency_id"]?.let { AgencyId(it) },
            agencyOfficialName = row["agency_official_name"],
            agencyZipCode = row["agency_zip_code"],
            agencyAddress = row["agency_address"],
            agencyPresidentPos = row["agency_president_pos"],
            agencyPresidentName = row["agency_president_name"],
        )
    }
}

private fun Map<String, String>.parseRoutes():List<Routes> {
    val data = get("routes.txt") ?: return emptyList()
    return csvReader().readAllWithHeader(data).map { row ->
        Routes(
            routeId = row["route_id"]?.let { RouteId(it) },
            agencyId = row["agency_id"]?.let { AgencyId(it) },
            routeShortName = row["route_short_name"],
            routeLongName = row["route_long_name"],
            routeDesc = row["route_desc"],
            routeType = row["route_type"],
            routeUrl = row["route_url"],
            routeColor = row["route_color"],
            routeTextColor = row["route_text_color"],
            jpParentRouteId = row["jp_parent_route_id"],
        )
    }
}

private fun Map<String, String>.parseRoutesJapan():List<RoutesJapan> {
    val data = get("routes_jp.txt") ?: return emptyList()
    return csvReader().readAllWithHeader(data).map {
        RoutesJapan(
            routeId = it["route_id"]?.let { RouteId(it) },
            routeUpdateDate = it["route_update_date"],
            originStop = it["origin_stop"],
            destinationStop = it["destination_stop"],
            viaStop = it["via_stop"],
        )
    }
}

/**
 * The data can be
 * ```
 * ①8000020130001
 * ②8000020130001_1
 * ```
 */
@JvmInline
value class AgencyId(val id: String)

/**
 * The data can be
 * ```
 * 1001
 * ```
 */
@JvmInline
value class RouteId(val id: String)

/**
 * The data can be
 * ```
 * S
 * ```
 */
@JvmInline
value class OfficeId(val id: String)

@JvmInline
value class ShapeId(val id:String)

@JvmInline
value class ServiceId(val id:String)

@JvmInline
value class TripId(val id:String)

@JvmInline
value class StopId(val id:String)

@JvmInline
value class FareId(val id:String)


data class GtfsData(
    val agency: List<Agency> = emptyList(),
    val agencyJapan: List<AgencyJapan> = emptyList(),
    val routes: List<Routes> = emptyList(),
    val routesJapan: List<RoutesJapan> = emptyList(),
)

// Gtfs data structure generated by the GitHub Copilot
data class Agency(
    val agencyId: AgencyId?,
    val agencyName: String?,
    val agencyUrl: String?,
    val agencyTimezone: String?,
    val agencyLang: String?,
    val agencyPhone: String?,
    val agencyFareUrl: String?,
    val agencyEmail: String?
)

/**
 * 事業者追加情報
 */
data class AgencyJapan(
    val agencyId: AgencyId?,
    /**
     * 事業者正式名称
     */
    val agencyOfficialName: String?,
    /**
     * 事業者郵便番号
     */
    val agencyZipCode: String?,
    /**
     * 事業者住所
     */
    val agencyAddress: String?,
    /**
     * 代表者肩書
     */
    val agencyPresidentPos: String?,
    /**
     * 代表者氏名
     */
    val agencyPresidentName: String?
)

data class Routes(
    val routeId: RouteId?,
    val agencyId: AgencyId?,
    val routeShortName: String?,
    val routeLongName: String?,
    val routeDesc: String?,
    val routeType: String?,
    val routeUrl: String?,
    val routeColor: String?,
    val routeTextColor: String?,
    val jpParentRouteId: String?,
)

data class RoutesJapan(
    val routeId: RouteId?,
    /**
     * ダイヤ改正日
     */
    val routeUpdateDate: String?,
    /**
     * 起点
     */
    val originStop: String?,
    /**
     * 終点
     */
    val destinationStop: String?,
    /**
     * 経過地
     */
    val viaStop: String?,
)

data class Trips(
    val routeId: RouteId?,
    val serviceId: String?,
    val tripId: String?,
    val tripHeadsign: String?,
    val tripShortName: String?,
    val directionId: String?,
    val blockId: String?,
    val shapeId: String?,
    val wheelchairAccessible: String?,
    val bikesAllowed: String?
)

data class StopTimes(
    val tripId: String?,
    val arrivalTime: String?,
    val departureTime: String?,
    val stopId: String?,
    val stopSequence: String?,
    val stopHeadsign: String?,
    val pickupType: String?,
    val dropOffType: String?,
    val shapeDistTraveled: String?,
    val timeline: String?
)

data class Stops(
    val stopId: String?,
    val stopCode: String?,
    val stopName: String,
    val stopDesc: String?,
    val stopLat: String?,
    val stopLon: String?,
    val zoneId: String?,
    val stopUrl: String?,
    val locationType: String?,
    val parentStation: String?,
    val stopTimezone: String?,
    val wheelchairBoarding: String?,
    val platformCode: String?
)

data class Calendar(
    val serviceId: String?,
    val monday: String?,
    val tuesday: String?,
    val wednesday: String?,
    val thursday: String?,
    val friday: String?,
    val saturday: String?,
    val sunday: String?,
    val startDate: String?, // Consider using a Date type
    val endDate: String? // Consider using a Date type
)

data class CalendarDates(
    val serviceId: String?,
    val date: String?, // Consider using a Date type
    val exceptionType: String?
)

data class Frequencies(
    val tripId: String?,
    val startTime: String?, // Consider using a Time type
    val endTime: String?, // Consider using a Time type
    val headwaySecs: String?,
    val exactTimes: String?
)

data class Transfers(
    val fromStopId: String?,
    val toStopId: String?,
    val transferType: String?,
    val minTransferTime: String?
)

data class FeedInfo(
    val feedPublisherName: String?,
    val feedPublisherUrl: String?,
    val feedLang: String?,
    val feedStartDate: String?, // Consider using a Date type
    val feedEndDate: String?, // Consider using a Date type
    val feedVersion: String?
)

data class Shapes(
    val shapeId: String,
    val shapePtLat: String?,
    val shapePtLon: String?,
    val shapePtSequence: String,
    val shapeDistTraveled: String??
)
